const ItemTrn = require('../models/ItemTrn');

exports.getAllItemTrn = async (req, res) => {
  try {
    const itemTrn = await ItemTrn.find();
    return res.status(200).json({
      status: 'success',
      results: itemTrn.length,
      data: {
        itemTrn,
      },
    });
  } catch (err) {
    return res.status(404).json({
      status: 'fail',
      message: err.message
    });
  }
};

exports.getItemTrn = async (req, res) => {
  try {
    const { id } = req.params;
    const ItemTrn = await ItemTrn.findById(id);
    if (!ItemTrn) {
      return res.status(404).json({
        status: 'fail',
        message: 'No ItemTrn found with that ID',
      });
    }
    return res.status(200).json({
      status: 'success',
      data: {
        ItemTrn,
      },
    });
  } catch (err) {
    return res.status(404).json({
      status: 'fail',
      message: err.message
    });
  }
};

exports.createItemTrn = async (req, res) => {
  try {
    const {
      pcode,
      pname,
      itemcode,
      itemname,
      against_bill_no,
      auto_bill_nos,
      bill_no,
      bill_date,
      bill_time,
      iss_qty,
      rec_qty,
      qty_trn,
      rate_trn,
      amt_trn,
      sub_tot1,
      dis_per,
      dis_amt,
      gross_tot1,
      tax_code,
      tax_name,
      taxper,
      tax_amt,
      net_amt,
      tot_qty,
      rec_type,
      ir_flag,
      vou_type,
      ref_1,
      qty_remark,
      bill_date_time,
      username,
      nag_qty,
      bag_qty,
      loose_qty,
      packing_type,
      cartage_amt,
      delivery_date,
      form_yn,
      form_no,
      form_type,
      bt_amt,
      veh_no,
      station_name,
      transport_name,
      gr_rr_no,
      fraight,
      ordno,
      ord_date,
      ch_no,
      ch_date,
      pkg_wgt,
      rnd_off_amt,
      dis_per_2,
      dis_amt_2,
      all_dis_tot,
      hsn_code,
      gst_type,
      state_code,
      cartage_per,
      igst_per,
      igst_amt,
      sgst_per,
      sgst_amt,
      cgst_per,
      cgst_amt,
      reverse_charge,
      eletronic_ref_no,
      bill_no_numric,
      sub_tot_1st_trn,
      dis_per_1st,
      dis_amt_1st,
      dis_amt_1st_tot,
      rate_after_dis_1st,
      sub_tot_2nd_trn,
      dis_per_2nd,
      dis_amt_2nd,
      rate_after_dis_2nd,
      sub_tot_3rd_trn,
      f_rate_trn,
      gst_per_trn,
      gst_amt_on_f_rate_trn,
      gst_amt_tot_trn,
      rate_after_gst,
      site_add_yn,
    } = req.body;
    const itemTrn = await ItemTrn.create({
      pcode,
      pname,
      itemcode,
      itemname,
      against_bill_no,
      auto_bill_nos,
      bill_no,
      bill_date,
      bill_time,
      iss_qty,
      rec_qty,
      qty_trn,
      rate_trn,
      amt_trn,
      sub_tot1,
      dis_per,
      dis_amt,
      gross_tot1,
      tax_code,
      tax_name,
      taxper,
      tax_amt,
      net_amt,
      tot_qty,
      rec_type,
      ir_flag,
      vou_type,
      ref_1,
      qty_remark,
      bill_date_time,
      username,
      nag_qty,
      bag_qty,
      loose_qty,
      packing_type,
      cartage_amt,
      delivery_date,
      form_yn,
      form_no,
      form_type,
      bt_amt,
      veh_no,
      station_name,
      transport_name,
      gr_rr_no,
      fraight,
      ordno,
      ord_date,
      ch_no,
      ch_date,
      pkg_wgt,
      rnd_off_amt,
      dis_per_2,
      dis_amt_2,
      all_dis_tot,
      hsn_code,
      gst_type,
      state_code,
      cartage_per,
      igst_per,
      igst_amt,
      sgst_per,
      sgst_amt,
      cgst_per,
      cgst_amt,
      reverse_charge,
      eletronic_ref_no,
      bill_no_numric,
      sub_tot_1st_trn,
      dis_per_1st,
      dis_amt_1st,
      dis_amt_1st_tot,
      rate_after_dis_1st,
      sub_tot_2nd_trn,
      dis_per_2nd,
      dis_amt_2nd,
      rate_after_dis_2nd,
      sub_tot_3rd_trn,
      f_rate_trn,
      gst_per_trn,
      gst_amt_on_f_rate_trn,
      gst_amt_tot_trn,
      rate_after_gst,
      site_add_yn,
    });

    return res.status(201).json({
      status: 'success',
      data: {
        itemTrn,
      },
    });
  } catch (err) {
    return res.status(404).json({
      status: 'fail',
      message: err.message
    });
  }
};

exports.updateItemTrn = async (req, res) => {
  try {
    const {
      pcode,
      pname,
      itemcode,
      itemname,
      against_bill_no,
      auto_bill_nos,
      bill_no,
      bill_date,
      bill_time,
      iss_qty,
      rec_qty,
      qty_trn,
      rate_trn,
      amt_trn,
      sub_tot1,
      dis_per,
      dis_amt,
      gross_tot1,
      tax_code,
      tax_name,
      taxper,
      tax_amt,
      net_amt,
      tot_qty,
      rec_type,
      ir_flag,
      vou_type,
      ref_1,
      qty_remark,
      bill_date_time,
      username,
      nag_qty,
      bag_qty,
      loose_qty,
      packing_type,
      cartage_amt,
      delivery_date,
      form_yn,
      form_no,
      form_type,
      bt_amt,
      veh_no,
      station_name,
      transport_name,
      gr_rr_no,
      fraight,
      ordno,
      ord_date,
      ch_no,
      ch_date,
      pkg_wgt,
      rnd_off_amt,
      dis_per_2,
      dis_amt_2,
      all_dis_tot,
      hsn_code,
      gst_type,
      state_code,
      cartage_per,
      igst_per,
      igst_amt,
      sgst_per,
      sgst_amt,
      cgst_per,
      cgst_amt,
      reverse_charge,
      eletronic_ref_no,
      bill_no_numric,
      sub_tot_1st_trn,
      dis_per_1st,
      dis_amt_1st,
      dis_amt_1st_tot,
      rate_after_dis_1st,
      sub_tot_2nd_trn,
      dis_per_2nd,
      dis_amt_2nd,
      rate_after_dis_2nd,
      sub_tot_3rd_trn,
      f_rate_trn,
      gst_per_trn,
      gst_amt_on_f_rate_trn,
      gst_amt_tot_trn,
      rate_after_gst,
      site_add_yn,
    } = req.body;
    const { id } = req.params;

    const itemTrn = await ItemTrn.findByIdAndUpdate(
      id,
      {
        pcode,
        pname,
        itemcode,
        itemname,
        against_bill_no,
        auto_bill_nos,
        bill_no,
        bill_date,
        bill_time,
        iss_qty,
        rec_qty,
        qty_trn,
        rate_trn,
        amt_trn,
        sub_tot1,
        dis_per,
        dis_amt,
        gross_tot1,
        tax_code,
        tax_name,
        taxper,
        tax_amt,
        net_amt,
        tot_qty,
        rec_type,
        ir_flag,
        vou_type,
        ref_1,
        qty_remark,
        bill_date_time,
        username,
        nag_qty,
        bag_qty,
        loose_qty,
        packing_type,
        cartage_amt,
        delivery_date,
        form_yn,
        form_no,
        form_type,
        bt_amt,
        veh_no,
        station_name,
        transport_name,
        gr_rr_no,
        fraight,
        ordno,
        ord_date,
        ch_no,
        ch_date,
        pkg_wgt,
        rnd_off_amt,
        dis_per_2,
        dis_amt_2,
        all_dis_tot,
        hsn_code,
        gst_type,
        state_code,
        cartage_per,
        igst_per,
        igst_amt,
        sgst_per,
        sgst_amt,
        cgst_per,
        cgst_amt,
        reverse_charge,
        eletronic_ref_no,
        bill_no_numric,
        sub_tot_1st_trn,
        dis_per_1st,
        dis_amt_1st,
        dis_amt_1st_tot,
        rate_after_dis_1st,
        sub_tot_2nd_trn,
        dis_per_2nd,
        dis_amt_2nd,
        rate_after_dis_2nd,
        sub_tot_3rd_trn,
        f_rate_trn,
        gst_per_trn,
        gst_amt_on_f_rate_trn,
        gst_amt_tot_trn,
        rate_after_gst,
        site_add_yn,
      },
      {
        new: true,
        runValidators: true,
      }
    );

    return res.status(200).json({
      status: 'success',
      data: {
        itemTrn,
      },
    });
  } catch (err) {
    return res.status(404).json({
      status: 'fail',
      message: err.message
    });
  }
};

exports.deleteItemTrn = async (req, res) => {
  try {
    const { id } = req.params;
    await ItemTrn.findByIdAndDelete(id);

    return res.status(204).json({
      status: 'success',
      data: null,
    });
  } catch (err) {
    return res.status(404).json({
      status: 'fail',
      message: err.message
    });
  }
};
